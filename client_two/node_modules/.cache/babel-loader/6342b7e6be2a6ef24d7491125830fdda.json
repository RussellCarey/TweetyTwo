{"ast":null,"code":"var _jsxFileName = \"/Users/r/Desktop/TweetyTwo/client_two/src/context/auth/AuthState.tsx\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from \"react\";\nimport axios from \"axios\";\nimport * as Cookies from \"js-cookie\";\nimport { ERequestOutcomes } from \"../../types/errors\";\nimport { SET_LOGIN_DATA } from \"./types\";\nimport \"./types\";\nimport AuthContext from \"./AuthContext\";\nimport AuthReducer from \"./AuthReducer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AuthState = props => {\n  _s();\n\n  const state = {\n    isLoggedIn: false,\n    jwt: \"\",\n    username: \"\"\n  };\n  const [authState, dispatch] = useReducer(AuthReducer, state);\n\n  const getUserData = async () => {\n    try {\n      const user = await axios.request({\n        method: \"POST\",\n        withCredentials: true,\n        url: `http://localhost:3333/api/auth/getUserData`,\n        headers: {\n          authorization: `${Cookies.get(\"token\")}`\n        }\n      });\n      if (user.data.data === null) return ERequestOutcomes.hasError;\n      dispatch({\n        type: SET_LOGIN_DATA,\n        payload: user.data.data\n      });\n    } catch (error) {\n      //! Just show modal, no need to return..\n      return ERequestOutcomes.hasError;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      authState,\n      getUserData\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthState, \"l7+p0tlJZhfrk08QCBrfgg6LDaI=\");\n\n_c = AuthState;\nexport default AuthState;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthState\");","map":{"version":3,"sources":["/Users/r/Desktop/TweetyTwo/client_two/src/context/auth/AuthState.tsx"],"names":["useReducer","axios","Cookies","ERequestOutcomes","SET_LOGIN_DATA","AuthContext","AuthReducer","AuthState","props","state","isLoggedIn","jwt","username","authState","dispatch","getUserData","user","request","method","withCredentials","url","headers","authorization","get","data","hasError","type","payload","error","children"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,OAAZ,MAAyB,WAAzB;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,cAAT,QAA+B,SAA/B;AAEA,OAAe,SAAf;AAEA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;;AAYA,MAAMC,SAAS,GAAIC,KAAD,IAAmB;AAAA;;AACnC,QAAMC,KAAkB,GAAG;AACzBC,IAAAA,UAAU,EAAE,KADa;AAEzBC,IAAAA,GAAG,EAAE,EAFoB;AAGzBC,IAAAA,QAAQ,EAAE;AAHe,GAA3B;AAMA,QAAM,CAACC,SAAD,EAAYC,QAAZ,IAAwBd,UAAU,CAACM,WAAD,EAAcG,KAAd,CAAxC;;AAEA,QAAMM,WAAW,GAAG,YAAY;AAC9B,QAAI;AACF,YAAMC,IAAI,GAAG,MAAMf,KAAK,CAACgB,OAAN,CAAc;AAC/BC,QAAAA,MAAM,EAAE,MADuB;AAE/BC,QAAAA,eAAe,EAAE,IAFc;AAG/BC,QAAAA,GAAG,EAAG,4CAHyB;AAI/BC,QAAAA,OAAO,EAAE;AACPC,UAAAA,aAAa,EAAG,GAAEpB,OAAO,CAACqB,GAAR,CAAY,OAAZ,CAAqB;AADhC;AAJsB,OAAd,CAAnB;AASA,UAAIP,IAAI,CAACQ,IAAL,CAAUA,IAAV,KAAmB,IAAvB,EAA6B,OAAOrB,gBAAgB,CAACsB,QAAxB;AAC7BX,MAAAA,QAAQ,CAAC;AAAEY,QAAAA,IAAI,EAAEtB,cAAR;AAAwBuB,QAAAA,OAAO,EAAEX,IAAI,CAACQ,IAAL,CAAUA;AAA3C,OAAD,CAAR;AACD,KAZD,CAYE,OAAOI,KAAP,EAAmB;AACnB;AACA,aAAOzB,gBAAgB,CAACsB,QAAxB;AACD;AACF,GAjBD;;AAmBA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLZ,MAAAA,SADK;AAELE,MAAAA;AAFK,KADT;AAAA,cAMGP,KAAK,CAACqB;AANT;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CAtCD;;GAAMtB,S;;KAAAA,S;AAwCN,eAAeA,SAAf","sourcesContent":["import { useReducer } from \"react\";\nimport axios from \"axios\";\nimport * as Cookies from \"js-cookie\";\nimport { ERequestOutcomes } from \"../../types/errors\";\nimport { SET_LOGIN_DATA } from \"./types\";\n\nimport {} from \"./types\";\n\nimport AuthContext from \"./AuthContext\";\nimport AuthReducer from \"./AuthReducer\";\n\nexport interface IProps {\n  children: React.ReactNode;\n}\n\ninterface IStateProps {\n  isLoggedIn: boolean;\n  jwt: string;\n  username: string;\n}\n\nconst AuthState = (props: IProps) => {\n  const state: IStateProps = {\n    isLoggedIn: false,\n    jwt: \"\",\n    username: \"\",\n  };\n\n  const [authState, dispatch] = useReducer(AuthReducer, state);\n\n  const getUserData = async () => {\n    try {\n      const user = await axios.request({\n        method: \"POST\",\n        withCredentials: true,\n        url: `http://localhost:3333/api/auth/getUserData`,\n        headers: {\n          authorization: `${Cookies.get(\"token\")}`,\n        },\n      });\n\n      if (user.data.data === null) return ERequestOutcomes.hasError;\n      dispatch({ type: SET_LOGIN_DATA, payload: user.data.data });\n    } catch (error: any) {\n      //! Just show modal, no need to return..\n      return ERequestOutcomes.hasError;\n    }\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        authState,\n        getUserData,\n      }}\n    >\n      {props.children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthState;\n"]},"metadata":{},"sourceType":"module"}