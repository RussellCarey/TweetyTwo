{"ast":null,"code":"var _jsxFileName = \"/Users/r/Desktop/TweetyTwo/client_two/src/components/navbar/create-new-button/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { theme } from \"../../../styles/theme/theme\";\nimport { ButtonHover } from \"../../../mixins/mixins\";\nimport JobsContext from \"../../../context/jobs/JobsContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.button`\n  color: ${theme.colors.text.white};\n  background-color: ${theme.colors.ui.blue};\n\n  width: 100px;\n  height: 40px;\n\n  border-radius: 15px;\n\n  outline: none;\n  border: none;\n\n  font-size: ${theme.fonts.fontsizes.medium};\n\n  ${ButtonHover}\n`;\n_c = Container;\n\nconst CreateNewButton = _ref => {\n  _s();\n\n  let {\n    isNew\n  } = _ref;\n  const jobsContext = useContext(JobsContext);\n  const {\n    showCreateWindow,\n    closeCreateWindow\n  } = jobsContext;\n  const [windowOpen, setWindowOpen] = useState(false);\n\n  const onClickHandler = () => {\n    if (isNew) {\n      if (windowOpen) {\n        setWindowOpen(false);\n        closeCreateWindow();\n      }\n\n      if (!windowOpen) {\n        setWindowOpen(true);\n        showCreateWindow();\n      }\n    }\n\n    if (!isNew) {}\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    onClick: onClickHandler,\n    children: windowOpen ? \"Close\" : \"New\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 10\n  }, this);\n};\n\n_s(CreateNewButton, \"Dgyza7aQyHjxpPJHqs3rT++lPcA=\");\n\n_c2 = CreateNewButton;\nexport default CreateNewButton;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"CreateNewButton\");","map":{"version":3,"sources":["/Users/r/Desktop/TweetyTwo/client_two/src/components/navbar/create-new-button/index.tsx"],"names":["React","useContext","useState","styled","theme","ButtonHover","JobsContext","Container","button","colors","text","white","ui","blue","fonts","fontsizes","medium","CreateNewButton","isNew","jobsContext","showCreateWindow","closeCreateWindow","windowOpen","setWindowOpen","onClickHandler"],"mappings":";;;AAAA,OAAOA,KAAP,IAAmCC,UAAnC,EAA+CC,QAA/C,QAA+D,OAA/D;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,KAAT,QAAsB,6BAAtB;AACA,SAASC,WAAT,QAA4B,wBAA5B;AAEA,OAAOC,WAAP,MAAwB,mCAAxB;;AAEA,MAAMC,SAAS,GAAGJ,MAAM,CAACK,MAAO;AAChC,WAAWJ,KAAK,CAACK,MAAN,CAAaC,IAAb,CAAkBC,KAAM;AACnC,sBAAsBP,KAAK,CAACK,MAAN,CAAaG,EAAb,CAAgBC,IAAK;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeT,KAAK,CAACU,KAAN,CAAYC,SAAZ,CAAsBC,MAAO;AAC5C;AACA,IAAIX,WAAY;AAChB,CAfA;KAAME,S;;AAqBN,MAAMU,eAA0C,GAAG,QAAe;AAAA;;AAAA,MAAd;AAAEC,IAAAA;AAAF,GAAc;AAChE,QAAMC,WAAW,GAAGlB,UAAU,CAACK,WAAD,CAA9B;AACA,QAAM;AAAEc,IAAAA,gBAAF;AAAoBC,IAAAA;AAApB,MAA0CF,WAAhD;AAEA,QAAM,CAACG,UAAD,EAAaC,aAAb,IAA8BrB,QAAQ,CAAC,KAAD,CAA5C;;AAEA,QAAMsB,cAAc,GAAG,MAAM;AAC3B,QAAIN,KAAJ,EAAW;AACT,UAAII,UAAJ,EAAgB;AACdC,QAAAA,aAAa,CAAC,KAAD,CAAb;AACAF,QAAAA,iBAAiB;AAClB;;AAED,UAAI,CAACC,UAAL,EAAiB;AACfC,QAAAA,aAAa,CAAC,IAAD,CAAb;AACAH,QAAAA,gBAAgB;AACjB;AACF;;AAED,QAAI,CAACF,KAAL,EAAY,CACX;AACF,GAfD;;AAiBA,sBAAO,QAAC,SAAD;AAAW,IAAA,OAAO,EAAEM,cAApB;AAAA,cAAqCF,UAAU,GAAG,OAAH,GAAa;AAA5D;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAxBD;;GAAML,e;;MAAAA,e;AA0BN,eAAeA,eAAf","sourcesContent":["import React, { FunctionComponent, useContext, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { theme } from \"../../../styles/theme/theme\";\nimport { ButtonHover } from \"../../../mixins/mixins\";\n\nimport JobsContext from \"../../../context/jobs/JobsContext\";\n\nconst Container = styled.button`\n  color: ${theme.colors.text.white};\n  background-color: ${theme.colors.ui.blue};\n\n  width: 100px;\n  height: 40px;\n\n  border-radius: 15px;\n\n  outline: none;\n  border: none;\n\n  font-size: ${theme.fonts.fontsizes.medium};\n\n  ${ButtonHover}\n`;\n\ninterface IProps {\n  isNew: boolean;\n}\n\nconst CreateNewButton: FunctionComponent<IProps> = ({ isNew }) => {\n  const jobsContext = useContext(JobsContext);\n  const { showCreateWindow, closeCreateWindow } = jobsContext;\n\n  const [windowOpen, setWindowOpen] = useState(false);\n\n  const onClickHandler = () => {\n    if (isNew) {\n      if (windowOpen) {\n        setWindowOpen(false);\n        closeCreateWindow();\n      }\n\n      if (!windowOpen) {\n        setWindowOpen(true);\n        showCreateWindow();\n      }\n    }\n\n    if (!isNew) {\n    }\n  };\n\n  return <Container onClick={onClickHandler}>{windowOpen ? \"Close\" : \"New\"}</Container>;\n};\n\nexport default CreateNewButton;\n"]},"metadata":{},"sourceType":"module"}