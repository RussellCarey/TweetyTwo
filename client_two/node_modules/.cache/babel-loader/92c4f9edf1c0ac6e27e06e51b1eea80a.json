{"ast":null,"code":"var _jsxFileName = \"/Users/r/Desktop/TweetyTwo/client_two/src/components/create-window/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useContext } from \"react\";\nimport styled from \"styled-components\";\nimport { theme } from \"../../styles/theme/theme\";\nimport { useSpring, animated } from \"react-spring\";\nimport ModalContext from \"../../context/modal/ModalContext\";\nimport TextArea from \"./textbox\";\nimport InputsContainer from \"./inputs-container\";\nimport DateTimeInput from \"./input\";\nimport CreateButtons from \"./button\";\nimport { ERequestOutcomes } from \"../../types/errors\";\nimport { EModal } from \"../../context/modal/types\";\nimport { uploadImageFile, uploadTweet } from \"./services/dbServices\";\nimport { checkDateInputs, checkWordCount } from \"./utils/check-inputs\";\nimport JobsContext from \"../../context/jobs/JobsContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled(animated.div)`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  z-index: 500;\n\n  width: 100vw;\n  height: 150px;\n  padding: ${theme.spacing.space.large} ${theme.spacing.space.xxxlage};\n\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  background-color: ${theme.colors.ui.main};\n  box-shadow: 0 -20px 30px rgba(0, 0, 0, 0.2);\n\n  @media (max-width: 550px) {\n    height: 300px;\n    flex-direction: column;\n    padding: ${theme.spacing.space.small} ${theme.spacing.space.large};\n    bottom: 100px;\n  }\n`;\n_c = Container;\nconst FileInput = styled.input`\n  display: none;\n  opacity: 100%;\n`;\n_c2 = FileInput;\n\nconst CreateWindow = () => {\n  _s();\n\n  const modalContext = useContext(ModalContext);\n  const {\n    showModal\n  } = modalContext;\n  const jobsContext = useContext(JobsContext);\n  const {\n    closeCreateWindow,\n    addNewJob\n  } = jobsContext;\n  const imageInputElement = useRef();\n  const [file, setFile] = useState();\n  const [tweet, setTweet] = useState({\n    message: \"\",\n    date: \"\",\n    time: \"\"\n  });\n  const animationProps = useSpring({\n    from: {\n      transform: \"translateY(400px)\",\n      opacity: 0\n    },\n    to: {\n      transform: \"translateY(0px)\",\n      opacity: 1\n    },\n    delay: 100\n  });\n\n  const dataChangeHandler = e => {\n    const target = e.target;\n    const variable = e.target.id;\n    setTweet({ ...tweet,\n      [variable]: target.value\n    });\n  };\n\n  const imageOnClickHandler = () => {\n    imageInputElement.current.click();\n  };\n\n  const imageOnChangeHandler = e => {\n    const target = e.target;\n    setFile(target.files[0]);\n  };\n\n  const uploadImage = async () => {\n    if (!file) return ERequestOutcomes.isEmpty;\n    const uploadImageReq = await uploadImageFile(file);\n    if (uploadImageReq.hasError) return ERequestOutcomes.hasError;\n    return uploadImageReq;\n  }; //! Need to add modal and resposnes from modal..\n\n\n  const handleSubmitClick = async () => {\n    if (!checkWordCount(tweet.message.length)) return showModal(\"Please check your word count\", EModal.hasError);\n    if (!checkDateInputs(tweet.date, tweet.time)) return showModal(\"Please check your date or time\", EModal.hasError);\n    const uploadImageAttempt = await uploadImage();\n    if (uploadImageAttempt === ERequestOutcomes.hasError) return showModal(\"Error creating tweet. Please try again.\", EModal.hasError);\n    const submittedTweet = await uploadTweet(tweet, uploadImageAttempt.data);\n    if (submittedTweet === ERequestOutcomes.hasError) return showModal(\"Error creating tweet. Please try again.\", EModal.hasError);\n    showModal(\"Tweet created!\", EModal.isOK);\n    setTimeout(() => {\n      closeCreateWindow();\n      addNewJob(submittedTweet.data.jobs.rows);\n    }, 3000);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    style: animationProps,\n    children: [/*#__PURE__*/_jsxDEV(TextArea, {\n      value: tweet.message,\n      onChange: dataChangeHandler,\n      id: \"message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputsContainer, {\n      children: [/*#__PURE__*/_jsxDEV(DateTimeInput, {\n        type: \"date\",\n        value: tweet.date,\n        onChange: dataChangeHandler,\n        id: \"date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DateTimeInput, {\n        type: \"time\",\n        value: tweet.time,\n        onChange: dataChangeHandler,\n        id: \"time\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CreateButtons, {\n        text: file ? file.name : \"add image\",\n        onClick: imageOnClickHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CreateButtons, {\n        text: \"submit\",\n        onClick: handleSubmitClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FileInput, {\n        id: \"file-select\",\n        type: \"file\",\n        accept: \"image/*\",\n        ref: imageInputElement,\n        onChange: imageOnChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CreateWindow, \"p7JowajmR5/WzSTREU01zhPfTZc=\", false, function () {\n  return [useSpring];\n});\n\n_c3 = CreateWindow;\nexport default CreateWindow;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"FileInput\");\n$RefreshReg$(_c3, \"CreateWindow\");","map":{"version":3,"sources":["/Users/r/Desktop/TweetyTwo/client_two/src/components/create-window/index.tsx"],"names":["React","useState","useRef","useContext","styled","theme","useSpring","animated","ModalContext","TextArea","InputsContainer","DateTimeInput","CreateButtons","ERequestOutcomes","EModal","uploadImageFile","uploadTweet","checkDateInputs","checkWordCount","JobsContext","Container","div","spacing","space","large","xxxlage","colors","ui","main","small","FileInput","input","CreateWindow","modalContext","showModal","jobsContext","closeCreateWindow","addNewJob","imageInputElement","file","setFile","tweet","setTweet","message","date","time","animationProps","from","transform","opacity","to","delay","dataChangeHandler","e","target","variable","id","value","imageOnClickHandler","current","click","imageOnChangeHandler","files","uploadImage","isEmpty","uploadImageReq","hasError","handleSubmitClick","length","uploadImageAttempt","submittedTweet","data","isOK","setTimeout","jobs","rows","name"],"mappings":"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","sourcesContent":["import React, { FunctionComponent, useState, useRef, useContext } from \"react\";\nimport axios from \"axios\";\nimport * as Cookies from \"js-cookie\";\nimport styled from \"styled-components\";\nimport { theme } from \"../../styles/theme/theme\";\n\nimport { useSpring, animated } from \"react-spring\";\n\nimport ModalContext from \"../../context/modal/ModalContext\";\n\nimport TextArea from \"./textbox\";\nimport InputsContainer from \"./inputs-container\";\nimport DateTimeInput from \"./input\";\nimport CreateButtons from \"./button\";\n\nimport { ERequestOutcomes } from \"../../types/errors\";\nimport { EModal } from \"../../context/modal/types\";\nimport { uploadImageFile, uploadTweet } from \"./services/dbServices\";\n\nimport { checkDateInputs, checkWordCount } from \"./utils/check-inputs\";\n\nimport JobsContext from \"../../context/jobs/JobsContext\";\n\nconst Container = styled(animated.div)`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  z-index: 500;\n\n  width: 100vw;\n  height: 150px;\n  padding: ${theme.spacing.space.large} ${theme.spacing.space.xxxlage};\n\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  background-color: ${theme.colors.ui.main};\n  box-shadow: 0 -20px 30px rgba(0, 0, 0, 0.2);\n\n  @media (max-width: 550px) {\n    height: 300px;\n    flex-direction: column;\n    padding: ${theme.spacing.space.small} ${theme.spacing.space.large};\n    bottom: 100px;\n  }\n`;\n\nconst FileInput = styled.input`\n  display: none;\n  opacity: 100%;\n`;\n\nconst CreateWindow: FunctionComponent = () => {\n  const modalContext = useContext(ModalContext);\n  const { showModal } = modalContext;\n  const jobsContext = useContext(JobsContext);\n  const { closeCreateWindow, addNewJob } = jobsContext;\n  const imageInputElement = useRef() as React.MutableRefObject<HTMLInputElement>;\n  const [file, setFile] = useState<File | null>();\n  const [tweet, setTweet] = useState({\n    message: \"\",\n    date: \"\",\n    time: \"\",\n  });\n\n  const animationProps = useSpring({\n    from: { transform: \"translateY(400px)\", opacity: 0 },\n    to: { transform: \"translateY(0px)\", opacity: 1 },\n    delay: 100,\n  });\n\n  const dataChangeHandler = (e: React.ChangeEvent) => {\n    const target = e.target as HTMLInputElement;\n    const variable = e.target.id!;\n    setTweet({ ...tweet, [variable]: target.value });\n  };\n\n  const imageOnClickHandler = () => {\n    imageInputElement.current.click();\n  };\n\n  const imageOnChangeHandler = (e: React.ChangeEvent) => {\n    const target = e.target as HTMLInputElement;\n    setFile(target.files![0]);\n  };\n\n  const uploadImage = async () => {\n    if (!file) return ERequestOutcomes.isEmpty;\n    const uploadImageReq = await uploadImageFile(file);\n    if (uploadImageReq.hasError) return ERequestOutcomes.hasError;\n    return uploadImageReq;\n  };\n\n  //! Need to add modal and resposnes from modal..\n  const handleSubmitClick = async () => {\n    if (!checkWordCount(tweet.message.length)) return showModal(\"Please check your word count\", EModal.hasError);\n    if (!checkDateInputs(tweet.date, tweet.time)) return showModal(\"Please check your date or time\", EModal.hasError);\n\n    const uploadImageAttempt = await uploadImage();\n    if (uploadImageAttempt === ERequestOutcomes.hasError)\n      return showModal(\"Error creating tweet. Please try again.\", EModal.hasError);\n\n    const submittedTweet = await uploadTweet(tweet, uploadImageAttempt.data);\n    if (submittedTweet === ERequestOutcomes.hasError)\n      return showModal(\"Error creating tweet. Please try again.\", EModal.hasError);\n\n    showModal(\"Tweet created!\", EModal.isOK);\n\n    setTimeout(() => {\n      closeCreateWindow();\n      addNewJob(submittedTweet.data.jobs.rows);\n    }, 3000);\n  };\n\n  return (\n    <Container style={animationProps}>\n      <TextArea value={tweet.message} onChange={dataChangeHandler} id=\"message\" />\n      <InputsContainer>\n        <DateTimeInput type={\"date\"} value={tweet.date} onChange={dataChangeHandler} id=\"date\" />\n        <DateTimeInput type={\"time\"} value={tweet.time} onChange={dataChangeHandler} id=\"time\" />\n        <CreateButtons text={file ? file.name : \"add image\"} onClick={imageOnClickHandler} />\n        <CreateButtons text={\"submit\"} onClick={handleSubmitClick} />\n        <FileInput\n          id=\"file-select\"\n          type=\"file\"\n          accept=\"image/*\"\n          ref={imageInputElement}\n          onChange={imageOnChangeHandler}\n        />\n      </InputsContainer>\n    </Container>\n  );\n};\n\nexport default CreateWindow;\n"]},"metadata":{},"sourceType":"module"}