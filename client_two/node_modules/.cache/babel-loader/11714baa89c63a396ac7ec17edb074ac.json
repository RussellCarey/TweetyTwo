{"ast":null,"code":"var _jsxFileName = \"/Users/r/Desktop/TweetyTwo/client_two/src/context/jobs/JobsState.tsx\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from \"react\";\nimport axios from \"axios\";\nimport * as Cookies from \"js-cookie\";\nimport { ERequestOutcomes } from \"../../types/errors\";\nimport { SET_JOBS, SET_ALL_JOBS, SHOW_WINDOW, CLOSE_WINDOW } from \"./types\";\nimport JobsReducer from \"./JobsReducer\";\nimport JobsContext from \"./JobsContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst JobState = props => {\n  _s();\n\n  const state = {\n    jobs: [],\n    jobsOriginal: [],\n    showCreateWindow: false\n  };\n  const [jobsState, dispatch] = useReducer(JobsReducer, state);\n\n  const getAllJobs = async () => {\n    try {\n      const jobs = await axios.request({\n        method: \"POST\",\n        withCredentials: true,\n        url: `http://localhost:3333/api/post/getAllJobs`,\n        headers: {\n          authorization: `${Cookies.get(\"token\")}`\n        }\n      });\n      dispatch({\n        type: SET_ALL_JOBS,\n        payload: jobs.data.data.rows\n      });\n    } catch (error) {\n      //! Just show modal, no need to return..\n      return ERequestOutcomes.hasError;\n    }\n  };\n\n  const deletePostByID = async id => {\n    try {\n      const jobDeleting = await axios.request({\n        method: \"POST\",\n        withCredentials: true,\n        url: `http://localhost:3333/api/post/deleteJob`,\n        headers: {\n          authorization: `${Cookies.get(\"token\")}`\n        },\n        data: {\n          jobID: id\n        }\n      });\n      return jobDeleting;\n    } catch (error) {\n      return ERequestOutcomes.hasError;\n    }\n  };\n\n  const searchJobsByText = text => {\n    console.log(text);\n    if (text === \"\") dispatch({\n      type: SET_JOBS,\n      payload: jobsState.jobsOriginal\n    });\n    const jobsStateJobs = jobsState.jobs.filter(jobs => jobs.message.includes(text));\n    dispatch({\n      type: SET_JOBS,\n      payload: jobsStateJobs\n    });\n  };\n\n  const orderJobsByField = text => {//! Save original array..\n    //! Take in the enum? for the sorting param - eg name, date, time..\n    //! Sort the array by that field and dispatch..\n  };\n\n  const showCreateWindow = () => {\n    console.log(\"Show create window\");\n    dispatch({\n      type: SHOW_WINDOW\n    });\n  };\n\n  const closeCreateWindow = () => {\n    console.log(\"Close create window\");\n    dispatch({\n      type: CLOSE_WINDOW\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(JobsContext.Provider, {\n    value: {\n      jobsState,\n      getAllJobs,\n      deletePostByID,\n      showCreateWindow,\n      closeCreateWindow,\n      searchJobsByText\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n\n_s(JobState, \"svD4X4IdJxmNe9tZACzxCKd4Dao=\");\n\n_c = JobState;\nexport default JobState;\n\nvar _c;\n\n$RefreshReg$(_c, \"JobState\");","map":{"version":3,"sources":["/Users/r/Desktop/TweetyTwo/client_two/src/context/jobs/JobsState.tsx"],"names":["useReducer","axios","Cookies","ERequestOutcomes","SET_JOBS","SET_ALL_JOBS","SHOW_WINDOW","CLOSE_WINDOW","JobsReducer","JobsContext","JobState","props","state","jobs","jobsOriginal","showCreateWindow","jobsState","dispatch","getAllJobs","request","method","withCredentials","url","headers","authorization","get","type","payload","data","rows","error","hasError","deletePostByID","id","jobDeleting","jobID","searchJobsByText","text","console","log","jobsStateJobs","filter","message","includes","orderJobsByField","closeCreateWindow","children"],"mappings":"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","sourcesContent":["import { useReducer } from \"react\";\nimport axios from \"axios\";\nimport * as Cookies from \"js-cookie\";\n\nimport { ERequestOutcomes } from \"../../types/errors\";\nimport { SET_JOBS, SET_ALL_JOBS, SHOW_WINDOW, CLOSE_WINDOW, IJobsState } from \"./types\";\n\nimport { IJobObject } from \"./types\";\n\nimport JobsReducer from \"./JobsReducer\";\nimport JobsContext from \"./JobsContext\";\n\nexport interface IProps {\n  children: React.ReactNode;\n}\n\nconst JobState = (props: IProps) => {\n  const state: IJobsState = {\n    jobs: [],\n    jobsOriginal: [],\n    showCreateWindow: false,\n  };\n\n  const [jobsState, dispatch] = useReducer(JobsReducer, state);\n\n  const getAllJobs = async () => {\n    try {\n      const jobs = await axios.request({\n        method: \"POST\",\n        withCredentials: true,\n        url: `http://localhost:3333/api/post/getAllJobs`,\n        headers: {\n          authorization: `${Cookies.get(\"token\")}`,\n        },\n      });\n\n      dispatch({ type: SET_ALL_JOBS, payload: jobs.data.data.rows });\n    } catch (error: any) {\n      //! Just show modal, no need to return..\n      return ERequestOutcomes.hasError;\n    }\n  };\n\n  const deletePostByID = async (id: string) => {\n    try {\n      const jobDeleting = await axios.request({\n        method: \"POST\",\n        withCredentials: true,\n        url: `http://localhost:3333/api/post/deleteJob`,\n        headers: {\n          authorization: `${Cookies.get(\"token\")}`,\n        },\n        data: {\n          jobID: id,\n        },\n      });\n\n      return jobDeleting;\n    } catch (error) {\n      return ERequestOutcomes.hasError;\n    }\n  };\n\n  const searchJobsByText = (text: string) => {\n    console.log(text);\n    if (text === \"\") dispatch({ type: SET_JOBS, payload: jobsState.jobsOriginal });\n    const jobsStateJobs = jobsState.jobs.filter((jobs: IJobObject) => jobs.message.includes(text));\n    dispatch({ type: SET_JOBS, payload: jobsStateJobs });\n  };\n\n  const orderJobsByField = (text: string) => {\n    //! Save original array..\n    //! Take in the enum? for the sorting param - eg name, date, time..\n    //! Sort the array by that field and dispatch..\n  };\n\n  const showCreateWindow = () => {\n    console.log(\"Show create window\");\n    dispatch({ type: SHOW_WINDOW });\n  };\n\n  const closeCreateWindow = () => {\n    console.log(\"Close create window\");\n    dispatch({ type: CLOSE_WINDOW });\n  };\n\n  return (\n    <JobsContext.Provider\n      value={{\n        jobsState,\n        getAllJobs,\n        deletePostByID,\n        showCreateWindow,\n        closeCreateWindow,\n        searchJobsByText,\n      }}\n    >\n      {props.children}\n    </JobsContext.Provider>\n  );\n};\n\nexport default JobState;\n"]},"metadata":{},"sourceType":"module"}